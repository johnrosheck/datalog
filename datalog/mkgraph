#!/usr/bin/perl -w
# Source File : mkgraph
# Begun : June 22, 2006
# Last Updated : November 25, 2010
#
# Copyright (C) 2006-2014 John B. Rosheck, Jr.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
use strict;
use Time::Local;

my $datestring;
my $formfile;
my %formkey;
my $verbose = 2;
my $dryrun = 0;
my @channel_number;
my @channel_color;
my @channel_name;
my $channel_count = 0;

my $required = "RRD,DATADESC,PREFIX,IMAGEPREFIX,TITLE,IMAGEDIR,HEIGHT,WIDTH";
$required .= ",TIMERANGE,UPPERLIMIT,LOWERLIMIT,CHANNELS";

if (!defined($ARGV[0]) || !defined($ARGV[1])) {
  print "ERROR - needs a date and form file to process\n";
  print "usage - mkgraph YYYYMMDD form_file_pathname\n";
  exit(0);
}

$datestring = $ARGV[0];
$formfile = $ARGV[1];

parse_form_file();

parse_desc_file($formkey{'DATADESC'});

my $cmd;
my $outimage = $formkey{'IMAGEDIR'} . "/" . $formkey{'IMAGEPREFIX'} . $datestring . ".png";

my $t;
if (!defined($t = rev_date_string($datestring))) {
  print "ERROR - couldn't convert date to seconds since epoch\n";
  exit(1);
}

# now do graph
$cmd = "rrdtool graph";
$cmd .= " $outimage";
#$cmd .= " --img-format=PNG";
$cmd .= " --title \"" . $formkey{'TITLE'} . " - " . $datestring . "\"";
$cmd .= " --end start+" . $formkey{'TIMERANGE'};
$cmd .= " --start $t";
$cmd .= " --width " . $formkey{'WIDTH'};
$cmd .= " --heigh " . $formkey{'HEIGHT'};
$cmd .= " --upper-limit " . $formkey{'UPPERLIMIT'};
$cmd .= " --lower-limit " . $formkey{'LOWERLIMIT'};
$cmd .= " --rigid";
# setup channels
my @ch;
@ch = split(/,/, $formkey{'CHANNELS'});
my $i;
my $j;
my $a;
my $notdone = 0;
for ($i=0;defined($ch[$i]);$i++) {
  # find this number in the channel data
  $a = "";
  $notdone = 1;
  for ($j=0;($j<$channel_count)&&($notdone==1);$j++) {
    if ($channel_number[$j] == $ch[$i]) { # found it
      $a = " DEF:ch" . $ch[$i] . "=" . $formkey{'RRD'} . ":ch" . $ch[$i] . ":AVERAGE";
      $a .= " LINE1:ch" . $ch[$i] . "#" . $channel_color[$j] . ":\"";
      $a .= $channel_name[$j] . "\"";
      $notdone = 0;
    }
  }
  if ($a ne "") {
    $cmd .= $a;
  } else { # not here
    print "ERROR - no description found for channel number \"" . $ch[$i] . "\"\n";
    exit(1);
  }
}

#$cmd .= " DEF:ch1=$filename:ch1:AVERAGE";
#$cmd .= " LINE1:ch1#007f00:\"N ext\"";
#$cmd .= " DEF:ch2=$filename:ch2:AVERAGE";
#$cmd .= " LINE2:ch2#00ff00:\"S ext\"";
#$cmd .= " DEF:ch4=$filename:ch4:AVERAGE";
#$cmd .= " LINE2:ch4#ff0000:\"Furn hot\"";
#$cmd .= " DEF:ch3=$filename:ch3:AVERAGE";
#$cmd .= " LINE2:ch3#0000ff:\"Furn ret\"";
#$cmd .= " DEF:ch5=$filename:ch5:AVERAGE";
#$cmd .= " LINE5:ch5#ff7f4f:\"Office\"";
#$cmd .= " DEF:ch6=$filename:ch6:AVERAGE";
#$cmd .= " LINE6:ch6#5f5f5f:\"Attic\"";
#$cmd .= " DEF:ch7=$filename:ch7:AVERAGE";
#$cmd .= " LINE2:ch7#ffff00:\"Thermostat\"";
#$cmd .= " DEF:ch8=$filename:ch8:AVERAGE";
#$cmd .= " LINE2:ch8#ff00ff:\"System\"";
print "$cmd\n";
if ($dryrun < 1) {
  #system ("$cmd\n");
  my $resp = `$cmd\n`;
  my $ecode = $?;
  print "resp = $resp\n";
  print "ecode = $ecode\n";
}

exit(0);

sub get_rrd_last_update {
  my ($fpath) = @_;
  my $cmd;
  my $resp;
  my @r;
  $cmd = "rrdtool info $fpath\n";
  @r = `$cmd`;
  my $i=0;
  my $teststring = "last_update = ";
  my $l = length($teststring);
  my $tv = 0;
  while (defined($r[$i])) {
    chomp($r[$i]);
    if (length($r[$i]) > $l) {
      if (substr($r[$i], 0, $l) eq $teststring) {
        $tv = int(substr($r[$i], $l, length($r[$i]) - $l));
        print ("got time string = $tv on entry $i\n");
        return($tv);
      }
    }
    $i++;
  }
  return(undef);
}

sub get_dtime_string {
  my ($a) = @_;
  my @t = localtime($a);
  $t[5] += 1900; # fix up year
  $t[4] += 1; # fix up month
  my $r = sprintf("%02d/%02d/%04d %02d:%02d:%02d", $t[4], $t[3], $t[5], $t[2], $t[1], $t[0]);
  return($r);
}

sub rev_date_string {
  my ($t) = @_;
  my $yr;
  my $mon;
  my $day;
  my $hr;
  my $min;
  my $sec;
  my @tr;
  my $res;
  
  if (!defined($yr = check_number(substr($t, 0, 4)))) {
    return;
  }
  if (!defined($mon = check_number(substr($t, 4, 2)))) {
    return;
  }
  if (!defined($day = check_number(substr($t, 6, 2)))) {
    return;
  }
  $hr = 0;
  $min = 0;
  $sec = 0;
  $tr[0] = int($sec);
  $tr[1] = int($min);
  $tr[2] = int($hr);
  $tr[3] = int($day);
  $tr[4] = int($mon) - 1; # fix up
  $tr[5] = int($yr) - 1900; # fix up
  # check bounds
  if (($tr[0] < 0) || ($tr[0] > 60)) {
    return;
  }
  if (($tr[1] < 0) || ($tr[1] > 59)) {
    return;
  }
  if (($tr[2] < 0) || ($tr[2] > 24)) {
    return;
  }
  if (($tr[3] < 0) || ($tr[3] > 31)) {
    return;
  }
  if (($tr[4] < 0) || ($tr[4] > 11)) {
    return;
  }
  if ($tr[5] < 70) {
    return;
  }
  $res = timelocal($tr[0],$tr[1],$tr[2],$tr[3],$tr[4],$tr[5]);
  return($res);
}

sub check_number {
  my ($given) = @_;
  if (!defined($given)) {
    return;
  }
  my $l = length($given);
  my $i;
  my $a;
  for ($i=0;$i<$l;$i++) {
    $a = substr($given, $i, 1);
    if (($a < "0") || ($a > "9")) {
      return;
    }
  }
  return(int($given));
}

sub parse_desc_file {
  my ($descfile) = @_;
  my $a;
  my @b;
  my $linecount = 0;
  if (!open(DFILE, $descfile)) {
    print "ERROR - couldn't open description file \"" . $descfile . "\" - " . $! . "\n";
    exit(1);
  }
  while (defined($a = <DFILE>)) {
    chomp($a);
    $linecount++;
    if (length($a) > 0) {
      if ((substr($a, 0, 1) eq " ") || (substr($a, 0, 1) eq "#")) {
        # comment or illegal so skip
      } else { # real
        @b = split(/,/, $a);
        if (!defined($b[0]) || !defined($b[1]) || !defined($b[2])) {
          print "ERROR - Illegal data descriptor on line #" . $linecount . "\n";
        } else {
          $channel_number[$channel_count] = $b[0];
          $channel_color[$channel_count] = $b[1];
          $channel_name[$channel_count] = $b[2];
          $channel_count++;
          if ($verbose > 0) {
            print "read description for channel " . $channel_number[$channel_count - 1];
            print ": color = \"" . $channel_color[$channel_count - 1] . "\", name = \"";
            print $channel_name[$channel_count - 1] . "\"\n";
          }
        }
      }
    }
  }
}


sub parse_form_file {
  my $a;
  my $name;
  my $value;
  my $linecount = 0;
  my $ecount = 0;
  my $i;
  my @b;
  if (!open(FFILE, $formfile)) {
    print "ERROR - couldn't open form file \"" . $formfile . "\" - " . $! . "\n";
    exit(1);
  }
  while (defined($a = <FFILE>)) {
    chomp($a);
    $linecount++;
    if (length($a) > 0) {
      if ((substr($a, 0, 1) eq " ") || (substr($a, 0, 1) eq "#")) {
        # comment or illegal so skip
      } else { # real
        ($name, $value) = split(/=/, $a);
        if (!defined($name) || !defined($value)) { # this is an error
          print "ERROR on line " . $linecount . " - improper name=value pair\n";
          $ecount++;
        } else {
          $formkey{$name} = $value;
        }
      }
    }
  }
  close(FFILE);
  if ($ecount > 0) { # dump out, error messages already printed
    exit(1);
  }
  $i = 0;
  @b = split(/,/, $required);
  while (defined($b[$i])) {
    $a = $b[$i];
    if (!defined($formkey{$a})) {
      print "ERROR - required key \"" . $a . "\" missing.\n";
      $ecount++;
    } else {
      print "read form file required data \"" . $b[$i] . "\" = \"" . $formkey{$b[$i]} . "\"\n";
    }
    $i++;
  }
  if ($ecount != 0) {
    print "ERROR - missing key(s) from form file.\n";
    exit(1);
  } else {
    if ($verbose > 0) {
      print "read form file successfully\n";
    }
  }
}
